package com.tzs.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanHandler;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import org.apache.commons.dbutils.handlers.ScalarHandler;

import com.tzs.entity.Student;
import com.tzs.util.C3P0Utils;

public class StudentDao implements BaseDao<Student> {
	private QueryRunner queryRunner = new QueryRunner();

	@Override
	public boolean add(Student t) {
		// 判断是否为空
		if (t == null) {
			return false;
		}
		// 声明一个sql语句添加用户
		String sql = "insert into student(name,password,sex,birthday,interest,selr_introduction)"
				+ " values(?,?,?,?,?,?)";

		Connection conn = C3P0Utils.getConnection();

		try {
			System.out.println("SQL语句：" + sql.toString());
			System.out.println("参数:" + t);
			int result = queryRunner.update(conn, sql, t.getName(), t.getPassword(), t.getSex(), t.getBirthday(),
					t.getInterest(), t.getSelf_introduction());
			return result > 0;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn);
		}
		return false;
	}

	@Override
	public boolean deleteById(Integer id) {
		// 判断是否为空
		if (id == null) {
			return false;
		}
		// 创建sql语句删除对象
		String sql = "delete from student where id =?";
		Connection conn = C3P0Utils.getConnection();

		try {
			System.out.println("SQL语句:" + sql.toString());
			System.out.println("参数：" + id);
			@SuppressWarnings("unused")
			int result = queryRunner.update(conn, sql, id);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn);// 关闭连接
		}
		return false;
	}

	/**
	 * 动态sql语句，根据条件组装sql语句
	 */
	@Override
	public boolean update(Student t) {
		// 检查对象或id是否为空
		if (t == null || t.getId() == null) {
			return false;
		}
		// 拼接sql语句
		StringBuffer sql = new StringBuffer("update student set");
		// 封装参数
		List<Object> params = new ArrayList<>();
		// 定义修改的字段数量
		int index = 0;

		// 判断用户名
		if (t.getName() != null) {

			sql.append(" name=?");
			params.add(t.getName());
			index++;
		}
		// 判断密码
		if (t.getPassword() != null) {
			if (index > 0) {
				sql.append(",");
			}
			sql.append(" password=?");
			params.add(t.getPassword());
			index++;
		}

		// 判断性别
		if (t.getSex() != null) {
			if (index > 0) {
				sql.append(",");
			}
			sql.append(" sex=?");
			params.add(t.getSex());
			index++;
		}

		// 判断出生年月
		if (t.getBirthday() != null) {
			if (index > 0) {
				sql.append(",");
			}
			sql.append(" birthday=?");
			params.add(t.getBirthday());
			index++;
		}

		// 判断爱好
		if (t.getInterest() != null) {
			if (index > 0) {
				sql.append(",");
			}
			sql.append(" interest=?");
			params.add(t.getInterest());
			index++;
		}

		// 判断自我介绍
		if (t.getSelf_introduction() != null) {
			if (index > 0) {
				sql.append(",");
			}
			sql.append(" self_introduction=?");
			params.add(t.getSelf_introduction());
			index++;
		}

		// 如果index=0 ，说明不需要修改任何字段
		if (index == 0) {
			return false;
		}

		sql.append(" where id=?");
		params.add(t.getId());

		// 执行修改动作
		Connection conn = C3P0Utils.getConnection();
		// 防止sql语句注入
		PreparedStatement stat = null;
		try {

			stat = conn.prepareStatement(sql.toString());

			for (int i = 1; i <= params.size(); i++) {
				stat.setObject(i, params.get(i - 1));
			}
			System.out.println("SQL语句:" + sql.toString());
			System.out.println("参数：" + Arrays.toString(params.toArray()));
			int result = stat.executeUpdate();

			return result > 0;

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn, stat);
		}

		return false;
	}

	@Override
	public Student queryById(Integer id) {
		// 判断id是否为空
		if (id == null) {
			return null;
		}
		String sql = "select * from student where id=?";
		Connection conn = C3P0Utils.getConnection();

		try {
			System.out.println("SQL语句:" + sql.toString());
			System.out.println("参数：" + id);
			// conn：数据库连接 sql：发送sql语句 BeanHandler：结果集处理类
			Student student = queryRunner.query(conn, sql, new BeanHandler<>(Student.class), id);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn);
		}

		return null;
	}

	@Override
	public List<Student> list(Student t) {

		StringBuffer sql = new StringBuffer("select * from student where 1=1 ");
		// 封装了参数
		List<Object> params = new ArrayList<>();

		if (t != null) {
			// 判断id
			if (t.getId() != null) {
				sql.append(" and id=?");
				params.add(t.getId());
			}
			// 名称支持模糊查询
			if (t.getName() != null && !"".equals(t.getName().trim())) {
				sql.append(" and name like ?");
				params.add("%" + t.getName().trim() + "%");
			}

			// 密码
			if (t.getPassword() != null && !"".equals(t.getPassword().trim())) {
				sql.append(" and password=?");
				params.add(t.getPassword());
			}
			// 生日是一个范围查询 开始-结束
			// 判断生日
			// startDate:2018-01-01
			// endDate:2018-10-10
			if (t.getStartDate() != null) {
				sql.append(" and birthday>=?");
				params.add(t.getStartDate());
			}
			if (t.getEndDate() != null) {
				sql.append(" and birthday<=?");
				params.add(t.getEndDate());
			}

		}
		Connection conn = C3P0Utils.getConnection();
		try {
			System.out.println("SQL语句:" + sql.toString());
			System.out.println("参数：" + Arrays.toString(params.toArray()));
			List<Student> list = queryRunner.query(conn, sql.toString(), params.toArray(),
					new BeanListHandler<>(Student.class));
			return list;
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn);
		}

		return null;
	}

	@Override
	public List<Student> page(Student t, int pageNo, int pageSize) {
		StringBuffer sql = new StringBuffer("select * from student where 1=1 ");
		// 封装了参数
		List<Object> params = new ArrayList<>();

		if (t != null) {
			// 判断id
			if (t.getId() != null) {
				sql.append(" and id=?");
				params.add(t.getId());
			}
			// 名称支持模糊查询
			if (t.getName() != null && "".equals(t.getName().trim())) {
				sql.append(" and name like ?");
				params.add("%" + t.getName().trim() + "%");
			}

			// 密码
			if (t.getPassword() != null && !"".equals(t.getPassword().trim())) {
				sql.append(" and password=?");
				params.add(t.getPassword());
			}
			// 生日是一个范围查询 开始-结束
			// 判断生日
			// startDate:2018-01-01
			// endDate:2018-10-10
			if (t.getStartDate() != null) {
				sql.append(" and birthday>=?");
				params.add(t.getStartDate());
			}
			if (t.getEndDate() != null) {
				sql.append(" and birthday<=?");
				params.add(t.getEndDate());
			}

		}
		sql.append(" limit ?,?");
		params.add((t.getPageNo() - 1) * t.getPageSize());
		params.add(t.getPageSize());

		Connection conn = C3P0Utils.getConnection();
		try {
			System.out.println("SQL语句:" + sql.toString());
			System.out.println("参数：" + Arrays.toString(params.toArray()));
			@SuppressWarnings("deprecation")
			List<Student> list = queryRunner.query(conn, sql.toString(), params.toArray(),
					new BeanListHandler<Student>(Student.class));
			return list;
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn);
		}
		return null;
	}

	public Student getByName(String name) {
		// 判断Name是否为空
		if (name == null && !"".equals(name.trim())) {
			return null;
		}

		String sql = "select * from student where name=?";
		Connection conn = C3P0Utils.getConnection();

		try {

			System.out.println("SQL语句:" + sql.toString());
			System.out.println("参数：" + name);
			Student student = queryRunner.query(conn, sql, new BeanHandler<>(Student.class), name);
			return student;
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn);
		}

		return null;
	}

	@Override
	public int count(Student t) {
		StringBuffer sql = new StringBuffer("select count(1) from student where 1=1 ");
		// 封装了参数
		List<Object> params = new ArrayList<>();

		if (t != null) {
			// 判断id
			if (t.getId() != null) {
				sql.append(" and id=?");
				params.add(t.getId());
			}
			// 名称支持模糊查询
			if (t.getName() != null && !"".equals(t.getName().trim())) {
				sql.append(" and name like ?");
				params.add("%" + t.getName().trim() + "%");
			}

			// 密码
			if (t.getPassword() != null && !"".equals(t.getPassword().trim())) {
				sql.append(" and password=?");
				params.add(t.getPassword());
			}
			// 生日是一个范围查询 开始-结束
			// 判断生日
			// startDate:2018-01-01
			// endDate:2018-10-10
			if (t.getStartDate() != null) {
				sql.append(" and birthday>=?");
				params.add(t.getStartDate());
			}
			if (t.getEndDate() != null) {
				sql.append(" and birthday<=?");
				params.add(t.getEndDate());
			}

		}
		Connection conn = C3P0Utils.getConnection();
		try {
			System.out.println("SQL语句:" + sql.toString());
			System.out.println("参数：" + Arrays.toString(params.toArray()));
			Long count = queryRunner.query(conn, sql.toString(), params.toArray(), new ScalarHandler<Long>());
			return count.intValue();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			C3P0Utils.close(conn);
		}

		return 0;
	}

}
